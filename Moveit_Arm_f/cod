#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit_visual_tools/moveit_visual_tools.h>

const double tau = 2 * M_PI;

int main(int argc, char** argv)
{
  ros::init(argc, argv, "move_group_interface_tutorial");
  ros::NodeHandle node_handle;

  ros::AsyncSpinner spinner(1);
  spinner.start();

  static const std::string PLANNING_GROUP = "panda_arm";

  moveit::planning_interface::MoveGroupInterface move_group_interface(PLANNING_GROUP);
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

  const moveit::core::JointModelGroup* joint_model_group =
      move_group_interface.getCurrentState()->getJointModelGroup(PLANNING_GROUP);

  namespace rvt = rviz_visual_tools;
  moveit_visual_tools::MoveItVisualTools visual_tools("panda_link0");
  visual_tools.deleteAllMarkers();

  visual_tools.loadRemoteControl();

  Eigen::Isometry3d text_pose = Eigen::Isometry3d::Identity();
  text_pose.translation().z() = 1.0;
  visual_tools.publishText(text_pose, "Pick and Place Demo", rvt::WHITE, rvt::XLARGE);

  visual_tools.trigger();

  // Declarații pentru mesaje de informare
  ROS_INFO_NAMED("tutorial", "Planning frame: %s", move_group_interface.getPlanningFrame().c_str());
  ROS_INFO_NAMED("tutorial", "End effector link: %s", move_group_interface.getEndEffectorLink().c_str());
  ROS_INFO_NAMED("tutorial", "Available Planning Groups:");
  std::copy(move_group_interface.getJointModelGroupNames().begin(),
            move_group_interface.getJointModelGroupNames().end(), std::ostream_iterator<std::string>(std::cout, ", "));

  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to add the table and ball");

  // Adăugare masă
  moveit_msgs::CollisionObject table;
  table.id = "table";
  table.header.frame_id = move_group_interface.getPlanningFrame();

  shape_msgs::SolidPrimitive table_primitive;
  table_primitive.type = table_primitive.BOX;
  table_primitive.dimensions = {0.5, 1.0, 0.1}; // dimensiuni: 0.5m x 1m x 0.1m

  geometry_msgs::Pose table_pose;
  table_pose.orientation.w = 1.0;
  table_pose.position.x = 0.5;
  table_pose.position.y = 0.0;
  table_pose.position.z = 0.05; // poziție în centrul scenei

  table.primitives.push_back(table_primitive);
  table.primitive_poses.push_back(table_pose);
  table.operation = table.ADD;

  // Adăugare minge
  moveit_msgs::CollisionObject ball;
  ball.id = "ball";
  ball.header.frame_id = move_group_interface.getPlanningFrame();

  shape_msgs::SolidPrimitive ball_primitive;
  ball_primitive.type = ball_primitive.SPHERE;
  ball_primitive.dimensions = {0.05}; // rază: 5 cm

  geometry_msgs::Pose ball_pose;
  ball_pose.orientation.w = 1.0;
  ball_pose.position.x = 0.5;
  ball_pose.position.y = 0.0;
  ball_pose.position.z = 0.15; // deasupra mesei

  ball.primitives.push_back(ball_primitive);
  ball.primitive_poses.push_back(ball_pose);
  ball.operation = ball.ADD;

  planning_scene_interface.applyCollisionObjects({table, ball});

  visual_tools.publishText(text_pose, "Table and ball added", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  visual_tools.prompt("Press 'next' to move to the ball and pick it up");

  // Mișcare către minge
  geometry_msgs::Pose target_pose;
  target_pose.orientation.w = 1.0;
  target_pose.position.x = 0.5;
  target_pose.position.y = 0.0;
  target_pose.position.z = 0.25; // deasupra mingii

  move_group_interface.setPoseTarget(target_pose);

  moveit::planning_interface::MoveGroupInterface::Plan my_plan;
  bool success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);

  ROS_INFO_NAMED("tutorial", "Visualizing plan (approach ball) %s", success ? "" : "FAILED");
  visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  visual_tools.trigger();

  move_group_interface.move();

  // Prinderea mingii
  ROS_INFO_NAMED("tutorial", "Attaching the ball");
  move_group_interface.attachObject(ball.id);

  visual_tools.publishText(text_pose, "Ball attached", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  visual_tools.prompt("Press 'next' to lift the ball");

  // Ridicare minge
  target_pose.position.z += 0.2; // Ridicare cu 20 cm
  move_group_interface.setPoseTarget(target_pose);

  success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  ROS_INFO_NAMED("tutorial", "Visualizing plan (lift ball) %s", success ? "" : "FAILED");

  visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  visual_tools.trigger();

  move_group_interface.move();

  // Final
  ROS_INFO_NAMED("tutorial", "Demo complete. Detaching and removing objects.");

  move_group_interface.detachObject(ball.id);
  planning_scene_interface.removeCollisionObjects({"table", "ball"});

  visual_tools.publishText(text_pose, "Objects removed", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  ros::shutdown();
  return 0;
}
