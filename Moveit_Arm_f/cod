#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit_visual_tools/moveit_visual_tools.h>

const double tau = 2 * M_PI;

int main(int argc, char** argv)
{
  ros::init(argc, argv, "move_group_interface_tutorial");
  ros::NodeHandle node_handle;
  ros::AsyncSpinner spinner(1);
  spinner.start();

  static const std::string PLANNING_GROUP = "panda_arm";
  moveit::planning_interface::MoveGroupInterface move_group_interface(PLANNING_GROUP);
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

  const moveit::core::JointModelGroup* joint_model_group =
      move_group_interface.getCurrentState()->getJointModelGroup(PLANNING_GROUP);

  namespace rvt = rviz_visual_tools;
  moveit_visual_tools::MoveItVisualTools visual_tools("panda_link0");
  visual_tools.deleteAllMarkers();
  visual_tools.loadRemoteControl();

  Eigen::Isometry3d text_pose = Eigen::Isometry3d::Identity();
  text_pose.translation().z() = 1.0;
  visual_tools.publishText(text_pose, "MoveGroupInterface Demo", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  ROS_INFO_NAMED("tutorial", "Planning frame: %s", move_group_interface.getPlanningFrame().c_str());
  ROS_INFO_NAMED("tutorial", "End effector link: %s", move_group_interface.getEndEffectorLink().c_str());

  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to start the demo");

  // 1. Definim masa ca un obiect de coliziune
  moveit_msgs::CollisionObject table;
  table.header.frame_id = move_group_interface.getPlanningFrame();
  table.id = "table";

  shape_msgs::SolidPrimitive table_shape;
  table_shape.type = table_shape.BOX;
  table_shape.dimensions.resize(3);
  table_shape.dimensions[0] = 0.6; // lungime
  table_shape.dimensions[1] = 1.2; // latime
  table_shape.dimensions[2] = 0.4; // inaltime

  geometry_msgs::Pose table_pose;
  table_pose.orientation.w = 1.0;
  table_pose.position.x = 0.5;
  table_pose.position.y = 0.0;
  table_pose.position.z = 0.2; // jumătate din înălțimea mesei

  table.primitives.push_back(table_shape);
  table.primitive_poses.push_back(table_pose);
  table.operation = table.ADD;

  // 2. Definim mingea ca un obiect de coliziune
  moveit_msgs::CollisionObject ball;
  ball.header.frame_id = move_group_interface.getPlanningFrame();
  ball.id = "ball";

  shape_msgs::SolidPrimitive ball_shape;
  ball_shape.type = ball_shape.SPHERE;
  ball_shape.dimensions.resize(1);
  ball_shape.dimensions[0] = 0.1; // raza mingii

  geometry_msgs::Pose ball_pose;
  ball_pose.orientation.w = 1.0;
  ball_pose.position.x = 0.5;
  ball_pose.position.y = 0.0;
  ball_pose.position.z = 0.5; // deasupra mesei

  ball.primitives.push_back(ball_shape);
  ball.primitive_poses.push_back(ball_pose);
  ball.operation = ball.ADD;

  // Adăugăm obiectele în scenă
  std::vector<moveit_msgs::CollisionObject> collision_objects = {table, ball};
  planning_scene_interface.addCollisionObjects(collision_objects);

  visual_tools.publishText(text_pose, "Added Table and Ball", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' to proceed with planning");

  // 3. Prindem mingea cu robotul
  ball.header.frame_id = move_group_interface.getEndEffectorLink();
  ball_pose.position.z = 0.2; // ajustăm poziția pentru a fi prinsă de efectorul final
  ball.primitive_poses[0] = ball_pose;
  ball.operation = ball.ADD;
  planning_scene_interface.applyCollisionObject(ball);

  move_group_interface.attachObject(ball.id, "panda_hand", { "panda_leftfinger", "panda_rightfinger" });

  visual_tools.publishText(text_pose, "Ball Attached", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' after the ball is attached");

  // 4. Planificăm o traiectorie pentru a muta mingea
  geometry_msgs::Pose target_pose;
  target_pose.orientation.w = 1.0;
  target_pose.position.x = 0.3;
  target_pose.position.y = -0.3;
  target_pose.position.z = 0.5;

  move_group_interface.setPoseTarget(target_pose);

  moveit::planning_interface::MoveGroupInterface::Plan my_plan;
  bool success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  ROS_INFO_NAMED("tutorial", "Visualizing plan to move ball %s", success ? "" : "FAILED");

  visual_tools.publishText(text_pose, "Moving Ball", rvt::WHITE, rvt::XLARGE);
  visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' to execute the trajectory");

  // Executăm planul
  if (success) {
    move_group_interface.execute(my_plan);
  }

  // Detasăm mingea
  move_group_interface.detachObject(ball.id);
  planning_scene_interface.removeCollisionObjects({table.id, ball.id});

  visual_tools.publishText(text_pose, "Demo Completed", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  ros::shutdown();
  return 0;
}
