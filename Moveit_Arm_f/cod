#include <ros/ros.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_visual_tools/moveit_visual_tools.h>
#include <moveit_msgs/CollisionObject.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <geometry_msgs/Pose.h>

// Constanta pentru calculul radianilor
const double tau = 2 * M_PI;

int main(int argc, char** argv)
{
  // Inițializare ROS
  ros::init(argc, argv, "inverse_kinematics_demo");
  ros::NodeHandle nh;
  ros::AsyncSpinner spinner(1);
  spinner.start();

  static const std::string PLANNING_GROUP = "panda_arm";

  // Instanțiere MoveGroupInterface și PlanningSceneInterface
  moveit::planning_interface::MoveGroupInterface move_group_interface(PLANNING_GROUP);
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

  // Obținem modelul articulațiilor
  const moveit::core::JointModelGroup* joint_model_group = 
      move_group_interface.getCurrentState()->getJointModelGroup(PLANNING_GROUP);

  // Inițializare instrumente vizuale
  namespace rvt = rviz_visual_tools;
  moveit_visual_tools::MoveItVisualTools visual_tools("panda_link0");
  visual_tools.deleteAllMarkers();
  visual_tools.loadRemoteControl();

  Eigen::Isometry3d text_pose = Eigen::Isometry3d::Identity();
  text_pose.translation().z() = 1.0;
  visual_tools.publishText(text_pose, "Inverse Kinematics Demo", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  // Afișare informații despre cadru și grupuri de planificare
  ROS_INFO_NAMED("demo", "Planning frame: %s", move_group_interface.getPlanningFrame().c_str());
  ROS_INFO_NAMED("demo", "End effector link: %s", move_group_interface.getEndEffectorLink().c_str());

  // Adăugăm obiecte în scena de planificare
  moveit_msgs::CollisionObject table;
  table.header.frame_id = move_group_interface.getPlanningFrame();
  table.id = "table";

  shape_msgs::SolidPrimitive table_primitive;
  table_primitive.type = table_primitive.BOX;
  table_primitive.dimensions = {1.0, 1.0, 0.2};

  geometry_msgs::Pose table_pose;
  table_pose.orientation.w = 1.0;
  table_pose.position.x = 0.5;
  table_pose.position.y = 0.0;
  table_pose.position.z = 0.1;

  table.primitives.push_back(table_primitive);
  table.primitive_poses.push_back(table_pose);
  table.operation = table.ADD;

  planning_scene_interface.applyCollisionObject(table);

  moveit_msgs::CollisionObject object;
  object.header.frame_id = move_group_interface.getPlanningFrame();
  object.id = "object";

  shape_msgs::SolidPrimitive object_primitive;
  object_primitive.type = object_primitive.CYLINDER;
  object_primitive.dimensions = {0.2, 0.04};

  geometry_msgs::Pose object_pose;
  object_pose.orientation.w = 1.0;
  object_pose.position.x = 0.5;
  object_pose.position.y = 0.0;
  object_pose.position.z = 0.35;

  object.primitives.push_back(object_primitive);
  object.primitive_poses.push_back(object_pose);
  object.operation = object.ADD;

  planning_scene_interface.applyCollisionObject(object);

  visual_tools.publishText(text_pose, "Added Objects", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' in Rviz to start IK demo");

  // Folosim IK pentru a muta brațul către poziția obiectului
  moveit::core::RobotState start_state(*move_group_interface.getCurrentState());
  geometry_msgs::Pose grasp_pose;
  grasp_pose.orientation.w = 1.0;
  grasp_pose.position.x = 0.5;
  grasp_pose.position.y = 0.0;
  grasp_pose.position.z = 0.4;

  start_state.setFromIK(joint_model_group, grasp_pose);
  move_group_interface.setStartState(start_state);
  move_group_interface.setPoseTarget(grasp_pose);

  moveit::planning_interface::MoveGroupInterface::Plan my_plan;
  bool success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);

  ROS_INFO_NAMED("demo", "Visualizing plan to grasp object: %s", success ? "SUCCESS" : "FAILED");

  visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' in Rviz to execute the grasp");

  if (success)
  {
    move_group_interface.execute(my_plan);
    ROS_INFO_NAMED("demo", "Plan executed successfully");
  }

  // Atașăm obiectul de braț
  ROS_INFO_NAMED("demo", "Attaching object to robot");
  move_group_interface.attachObject(object.id);

  visual_tools.publishText(text_pose, "Object Attached", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' in Rviz to detach the object");

  // Detach and remove the object
  move_group_interface.detachObject(object.id);
  planning_scene_interface.removeCollisionObjects({table.id, object.id});

  visual_tools.publishText(text_pose, "Object Detached and Removed", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();
  visual_tools.prompt("Press 'next' in Rviz to end the demo");

  ros::shutdown();
  return 0;
}

